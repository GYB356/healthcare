// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  notifications Notification[]
  doctorProfile    DoctorProfile?
  patientProfile   PatientProfile?
  medicalRecords   MedicalRecord[]   @relation("DoctorRecords")
  appointments     Appointment[]     @relation("DoctorAppointments")
  patientRecords   MedicalRecord[]   @relation("PatientRecords")
  patientAppointments Appointment[]  @relation("PatientAppointments")
  auditLogs        AuditLog[]

  @@map("users")
}

model DoctorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  specialization String
  license        String
  availability   Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("doctor_profiles")
}

model PatientProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  dateOfBirth    DateTime
  bloodType      String?
  allergies      String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patient_profiles")
}

model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String
  diagnosis   String
  prescription String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  auditLogs   AuditLog[]

  patient     User     @relation("PatientRecords", fields: [patientId], references: [id])
  doctor      User     @relation("DoctorRecords", fields: [doctorId], references: [id])

  @@map("medical_records")
}

model Appointment {
  id          String   @id @default(cuid())
  date        DateTime
  startTime   String
  endTime     String
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  patientId   String
  doctorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  billings    Billing[]
  auditLogs   AuditLog[]
  
  patient     User     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor      User     @relation("DoctorAppointments", fields: [doctorId], references: [id])

  @@map("appointments")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  entityId    String?
  entityType  String
  action      String
  details     String?
  createdAt   DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], map: "audit_logs_userId_fkey")
  medicalRecord MedicalRecord? @relation(fields: [entityId], references: [id], map: "audit_logs_medicalRecordId_fkey")
  appointment   Appointment?   @relation(fields: [entityId], references: [id], map: "audit_logs_appointmentId_fkey")

  @@map("audit_logs")
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String    // EMAIL, SMS, IN_APP
  title       String
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billing {
  id              String    @id @default(cuid())
  appointmentId   String    @unique
  amount          Float
  status          String    @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED
  dueDate         DateTime
  paidAt          DateTime?
  stripeInvoiceId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  appointment     Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  DOCTOR
  NURSE
  STAFF
  PATIENT
  USER
}

enum RecordType {
  CONSULTATION
  PRESCRIPTION
  LAB_RESULT
  IMAGING
  SURGERY
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
}

enum EntityType {
  MEDICAL_RECORD
  APPOINTMENT
  USER
  DOCTOR_PROFILE
  PATIENT_PROFILE
}
